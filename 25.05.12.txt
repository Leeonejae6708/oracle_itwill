# cmd 창에서 접속 방식

Microsoft Windows [Version 10.0.22621.4317]
(c) Microsoft Corporation. All rights reserved.

C:\Windows\System32>sqlplus / as sysdba

SQL*Plus: Release 11.2.0.2.0 Production on 월 5월 12 10:55:15 2025

Copyright (c) 1982, 2014, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Express Edition Release 11.2.0.2.0 - 64bit Production
-----------------------------------------------------------------------------------------
# OS 인증방식

SQL> conn / as sysdba
Connected
SQL> show user
USER is "SYS"

# Oracle 유저인증 방식

SQL> conn sys/oracle as sysdba
Connected

-> 위와 같은 방식은 cmd창에서 oracle 사용하기에 불편
->>'oracle sql developer' 라는 에디터 프로그램 사용
-------------------------------------------------------------------------------------------
# hr 유저 패스워드 수정, 계정 open

alter user hr IDENTIFIED by hr account unlock; 

alter user hr 
IDENTIFIED by hr -> 패스워드 수정
account unlock;   -> 계정 open
-------------------------------------------------------------------------------------
Data
- 관찰이나 측정을 통해서 수집된 사실(facts)이나 값(values)
- 컴퓨터가 처리할 수 있는 문자, 숫자, 소리, 그림의 형태로 된 자료
-------------------------------------------------------------------------------------
Database
- Data들의 집합
- 여러 사람이나 프로그램이 Data를 쉽게 공유하기 위해 Data의 조직화된 모음으로
관리되는 Data의 집합
-------------------------------------------------------------------------------------
DBMS(DataBase Management System)
- 데이터베이스 소프트웨어를 의미
- oracle, mssql, mysql, mariadb, postgresql, sqlite(RDBMS)
-------------------------------------------------------------------------------------
RDBMS(Relational DataBase Management System)
- 표(table) 형식의 모델
  -> 2차원 테이블 형태로 표현할 뒤 각 테이블 간의 관계를 정의
- 행(row)과 열(column)로 구성되어 있다
-------------------------------------------------------------------------------------
SQL(Structured Query Language)
- 데이터베이스에서 데이터를 정의, 조작, 제어하기 위해 사용하는 언어
- ANSI(American Nationail Standards Institute) 표준어인 SQL을 사용
 1) DQL(Data Query Language)
   -> 데이터베이스에 저장된 데이터를 조회하는 명령어 
   -> select

 2) DML(Data Management Language)
   -> 데이터베이스에 데이터를 입력, 수정, 삭제하는 명령어
   -> insert, update, delete, merge

 3) TCL(Transaction Control Language)
   -> 데이터의 일관성을 유지하면서 안정적으로 데이터를 복구시키기위한 명령어
   -> commit, rollback, savepoint

 4) DCL(Data Control Language)
   -> 데이터베이스에 저장된 데이터를 관리하기 위해서 데이터의 보안성을 제어하기 위한 명령어, 권한관리
   -> grant, revoke

 5) DDL(Data DefinitionLanguage)
   -> 데이터베이스를 생성 또는 객체들을 생성/유지/관리하는 명령어
   -> create, alter, drop, truncate, rename, comment
-------------------------------------------------------------------------------------
테이블
- 행(row)과 열(column)로 구성되어있는 데이터의 저장 구조
-------------------------------------------------------------------------------------
select 문
- 데이터베이스에서 데이터를 검색(조회)하는 문
-> select 컬럼, 컬럼, 컬럼, ...      --절
    from 소유자이름.테이블명;    --절

- 기능:
  1) projection: 열 추출
  2) selection: 행 추출
  3) join: 서로 다른 테이블에 있는 데이터 추출

ex) SELECT employee_id
     FROM hr.employees;
-------------------------------------------------------------------------------------
SQL문 작성시 주의점
- SQL문은 대소문자를 구분X
  # 성능으로 보면 SQL문의 대소문자를 규칙적으로 생성하면 좋다
select * from hr.employees;
SELECT * FROM hr.employees;

- 공백 문자는 구분한다.
SELECT last_name,first_name FROM hr.employees;
SELECT last_name, first_name FROM hr.employees;

- tab key, enter key 구분한다.
SELECT last_name,first_name FROM hr.employees;

SELECT last_name,	first_name FROM hr.employees;

SELECT last_name,first_name 
FROM hr.employees;

- hint(힌트, 실행계획을 제어하는 기능)
select * from hr.employees
where employee_id = 100;

SELECT /*+ full(e) */*
FROM hr.employees e
where employee_id = 100;

- 단일 행 주석 (--주석 내용)

-여러 행 주석 (/* 주석 내용 */)
SELECT
/* 사원 정보 */
    last_name,   -- 성
    first_name,  -- 이름
    salary       -- 급여
FROM hr.employees;

 ## SQL문 작성할 때 규칙적으로 작성하자!
  1) 대소문자 구분지어서 작성하자
  2) 절은 서로 다른 줄에 작성하자
  3) 주석처리 잘하자
  4) SQL문 끝에는 세미콜론(;) 종료하자

desc hr.employees; --테이블 구조 확인
-------------------------------------------------------------------------------------
산술연산자
- *(곱하기),  /(나누기),  +(더하기),  -(빼기)
- number타입: *, /, +, -
- varchar2, char: 사칙연산 불가능
- date 타입: +, -
SELECT  
    employee_id,
    salary,
    salary *12
FROM hr.employees; 

SELECT  
    employee_id,
    hire_date,
    hire_date + 100
    hire_date - 100
FROM hr.employees;

-> 실제 데이터는 변하지 않음

# 사칙연산 우선 순위
1. *, /
2. +, -
(동일순위일시 왼쪽부터)

SELECT
    a*b/c+d-e
FROM dual;
-> [{(a*b)/c}+d]-e
# 여러 개의 연산자를 같이 사용할 때는 괄호를 표현하면 좋다 -> 가독성을 위해
# 연산자 우선순위를 제어하는 방법은 괄호를 이용
-------------------------------------------------------------------------------------
Null값 정의
- Null은 사용할 수 없거나, 할당되지 안았거나, 알 수 없거나, 적용할 수 없는 값
  -> 결측값(치)
- Null은 0이나 공백이 아님

SELECT
    employee_id,
    salary,
    commission_pct,
    salary * 12 + salary*12 * commission_pct
from hr.employees;   
-> null이 포함된 산술연산은 무조건 null값이 return
-> 모든 비교는 알 수 없음(Unknown) 리턴 
-> 집계함수는 Null을 제외하고 계산
->> pl/sql 문법으로 null값을 다른 값으로 대체
->>> NVL함수를 사용해도 됨 NVL(컬럼 이름, 대체값)
IF commission_pct IS NULL then
         0
ELSE
	commission_pct
END IF;

- NVL함수 활용
SELECT
    employee_id,
    salary,
    commission_pct,
    salary * 12 + salary*12 * NVL(commission_pct, 0)
from hr.employees;
-------------------------------------------------------------------------------------
열병칭 정의AS(ALIAS)
- 열 이름을 다른 이름으로 출력
- 열 이름 바로 뒤에 한 칸 띄어쓰기 한 후 입력
- 열 이름과 별칭 사이에는 as 키워드를 사용(선택)
- 열 별칭에 공백, 특수문자(_, #, $ 제외한), 대소문자를 구분하려면 큰 따옴표("")로 묶어야 함
- 열 병칭에 숫자가 먼저 나오면 큰 따옴표로 묶어야 함
SELECT
    employee_id 사번,
    salary 급여,
    commission_pct "1000 보너스",
    salary * 12 + salary*12 * NVL(commission_pct, 0) as "annual_salary"
from hr.employees;
-------------------------------------------------------------------------------------
연결연산자
- 열이나 문자열을 다른 열에 연결
- 두 개의 세로선(||)으로 표현
- 결과 열은 문자열로 생성
SELECT last_name || first_name as name
FROM hr.employees;
-------------------------------------------------------------------------------------
리터럴 문자열
- SELECT문에 포함된 문자, 숫자, 날짜
- 리터럴 문자열을 표현하려면 작은 따옴표(')로 묶어야 함
SELECT last_name||' '||first_name as name
FROM hr.employees;

SELECT last_name||', '||first_name as name
FROM hr.employees;

SELECT 'My name is '||last_name||' '||first_name "name"
FROM hr.employees;

SELECT 'My name''s '||last_name||' '||first_name "name"
FROM hr.employees;
-------------------------------------------------------------------------------------
대체 인용(q) 연산자
- q'[리터럴문자열]'
- q'<리터럴문자열>'
- q'(리터럴문자열)'
- q'{리터럴문자열}'
- q'!리터럴문자열!'
SELECT 
	q'[My name's]'||last_name||' '||first_name "name"
FROM hr.employees;
-------------------------------------------------------------------------------------
중복 행 제거
- 기본적으로 query(select) 결과에는 중복행을 포함한 모든 행이 출력
- DISTINCT 키워드 사용
SELECT 
    DISTINCT department_id
FROM hr.employees;

SELECT 
    DISTINCT department_id, job_id
FROM hr.employees;

- UNIQUE 키워드 사용
SELECT 
    UNIQUE department_id
FROM hr.employees;

- distinct, unique 키워드는 select절 제일 앞에 한 번만 사용
-------------------------------------------------------------------------------------
[문제 1] 
employees 테이블에서 employee_id, last_name과 first_name은 연결해서 표시하고 열 별칭은 화면 예처럼 쿼리문 작성
<화면결과>
Emp#   Employee Name
-------  -----------------------
100       King Steven
101       Kochhar Neena
...

A) 
SELECT employee_id as "Emp#", last_name||' '||first_name "Employee Name"
FROM hr.employees;


[문제 2] 
employees 테이블에서 컬럼중에 last_name, job_id를 연결해서 표시하고(쉼표와 공백으로 구분) 열 별칭은 화면 예처럼 쿼리문을 작성
<화면결과>
Employee and Title
----------------------------
Abel, SA_REP
Ande, SA_REP
...

A) 
SELECT last_name||', '||job_id as "Employee and Title"
FROM hr.employees;


[문제 3]
departments 테이블에 있는 데이터에서 department_name, manager_id 컬럼을 가지고 화면 결과처럼 출력하는 쿼리문 작석
<화면결과>
Department and Manager
---------------------------------------
Administration Department's Manager id: 200
Marketing Department's Manager id: 201
...

A) 
SELECT department_name||q'[ Department's Manager id: ]'||manager_id as "Department and Manager"
FROM hr.departments;

A) 다른 방식
SELECT 
    department_name||'[ Department''s Manager id: ]'||manager_id as "Department and Manager"
FROM hr.departments;
-------------------------------------------------------------------------------------------
WHERE 절

###
SELECT
FROM
WHERE 조건식(기준컬럼 비교연산자 비교값);
###

- 행을 제한하는 절(필터링)
- 조건절
- 기준 컬럼이 문자열, 날짜열이면 비교값은 작은 따옴표(')로 묶어야 함 (숫자형은 x)
- 영문자는 대소문자를 구분한다
- 날짜 형식은 지역에 따라 기본 날짜 형식이 다르다 (지역 포맷과 맞지 않게 사용하면 에러 발생)
-> 한국지역: RR/MM/DD
-> 미국지역: DD-MON-RR
- 비교연산자
	같다(=), 같지 않다(!=, ^=, <>), 크다(>), 크거나 같다(>=) , 작다(<), 작거나 같다(<=)
- 논리연산자
	1) AND: 두 조건이 모두 참일 경우 TRUE
	2) OR: 두 조건 중 하나만 참이여도 TRUE
	3) NOT: FALSE일 경우 TRUE, TRUE일 경우 FALSE
SELECT *
FROM nls_session_parameters;

SELECT *
FROM hr.employees
WHERE employee_id = 100;

SELECT *
FROM hr.employees
WHERE last_name = 'King';

SELECT *
FROM hr.employees
WHERE last_name = 'KING';

SELECT *
FROM hr.employees
WHERE hire_date = '13-JAN-01'; -> 미국 지역: DD-MON-RR
->> 오류 발생

SELECT *
FROM hr.employees
WHERE hire_date = TO_DATE('2001-01-13', 'yyyy-mm-dd');
-> to_date 함수를 사용하여 문자열을 날짜형으로 변환

SELECT *
FROM hr.employees
WHERE salary > 1000;

SELECT *
FROM hr.employees
WHERE salary >= 1000;

SELECT *
FROM hr.employees
WHERE department_id = 50 
AND salary >= 5000;

SELECT *
FROM hr.employees
WHERE department_id = 50 
OR salary >= 5000;
-------------------------------------------------------------------------------------------
엘클라시코 졌다. 4연패다. 슬프다.
